snippet _guard "Include header once only guard"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
    snip.rv = snip.c`}
#define $1

${0}

#endif /* $1 */
endsnippet

snippet _headerold "Generic header with ifdef guards" !b
/********************************************************************
*   Project     ${1:Project}
*   Copyright:
********************************************************************/

#ifndef _${2:MODULE_FILENAME}_H_
#define _$2_H_

#endif // _$2_H_
endsnippet

snippet _header "Generic header" !b
/********************************************************************
*   Project     ${1:Project}
*   Copyright:
********************************************************************/

#pragma once
endsnippet

snippet _class "Generic class declaration" !b
// requires:
//#include <stdexcept>
//#include <memory>

class ${1:class_name}
{
 public:

	struct an_error : std::runtime_error
	{ an_error(std::string const & m) noexcept : runtime_error(m) { } };

 private:

	struct impl;
	std::unique_ptr<impl> pimpl;
};
endsnippet

snippet _error "Generic error declaration" !
struct ${1:new}_error : an_error
{ $1_error(std::string const & m) noexcept : an_error(m) { } };
endsnippet
